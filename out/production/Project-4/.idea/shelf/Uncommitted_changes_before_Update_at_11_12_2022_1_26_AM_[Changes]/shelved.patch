Index: MarketPlace.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.*;\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\npublic class MarketPlace {\r\n    public static void main(String[] args) throws IOException {\r\n        Scanner scanner = new Scanner(System.in);\r\n\r\n        System.out.println(\"Welcome to Marketplace!\");\r\n        String info;\r\n        //implement try catch error for verify login\r\n        while (true) {\r\n            try {\r\n                System.out.println(\"Enter the username\");\r\n                String userName = scanner.nextLine();\r\n                System.out.println(\"Enter the password\");\r\n                String password = scanner.nextLine();\r\n                info = verifyLogin(userName, password);\r\n                break;\r\n            } catch (UserNamePasswordIncorrectException e) {\r\n                System.out.println(e.getMessage());\r\n            }\r\n        }\r\n        User user = getUser(info);\r\n        System.out.println(\"Welcome \" + user.getCustomerName() + \"!\");\r\n\r\n        boolean running = true;\r\n        if (user instanceof Customer) {\r\n            while (running) {\r\n                System.out.println(\"What option would you like to choose?\");\r\n                System.out.println(\"\"\"\r\n                        1. View the marketplace\r\n                        2. Search for specific products by name, description, and store\r\n                        3. Sort by price least to greatest\r\n                        4. Sort by quantity least to greatest\r\n                        5. View Dashboard\r\n                        6. Export File with Purchase History\r\n                        7. Add items to the Shopping Cart\r\n                        8. Exit\"\"\");\r\n                int option = Integer.parseInt(scanner.nextLine());\r\n                switch (option) {\r\n                    case (1) -> CustomerOptions.viewMarket();\r\n                    case (2) -> CustomerOptions.searchForProducts(scanner);\r\n                    case (3) -> CustomerOptions.sortByPrice();\r\n                    case (4) -> CustomerOptions.sortByQuantity();\r\n                    case (5) -> Dashboard.viewCustomer(); //TODO\r\n                    case (6) -> Dashboard.exportPurchaseHistory(); //TODO\r\n                    case (7) -> CustomerOptions.addProductsShoppingCart(); //TODO\r\n                    case (8) -> {\r\n                        running = false;\r\n                    }\r\n                    default -> System.out.println(\"Please enter a valid input!\");\r\n\r\n                }\r\n            }\r\n\r\n\r\n        } else {\r\n            while (running) {\r\n\r\n                System.out.println(\"What option would you like to choose?\");\r\n                System.out.println(\"\"\"\r\n                        1. View the marketplace\r\n                        2. Create, edit, or delete products from a store\r\n                        3. View the list of their sales by store\r\n                        4. View Dashboard\r\n                        5. Import/Export Products using CSV file\r\n                        6. View products currently in customer's shopping carts\r\n                        7. Exit\"\"\");\r\n                int option = Integer.parseInt(scanner.nextLine());\r\n                switch (option) {\r\n                    case (1) -> CustomerOptions.viewMarket();\r\n                    case (2) -> SellerOptions.editProducts(scanner);\r\n                    case (3) -> SellerOptions.viewSales();//TODO\r\n                    case (4) -> Dashboard.viewSeller(); //TODO\r\n                    case (5) -> Dashboard.csvFile(); //TODO\r\n                    case (6) -> SellerOptions.viewCustomerShoppingCarts(); //TODO\r\n                    case (7) -> running = false;\r\n                    default -> System.out.println(\"Please enter a valid input!\");\r\n\r\n\r\n\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    public static String verifyLogin(String username, String password) throws UserNamePasswordIncorrectException {\r\n        File f = new File(\"login.txt\");\r\n        FileReader fr = null;\r\n        BufferedReader bfr = null;\r\n        try {\r\n            fr = new FileReader(f);\r\n            bfr = new BufferedReader(fr);\r\n            String line = bfr.readLine();\r\n            while (line != null) {\r\n                String[] contents = line.split(\",\");\r\n                if (contents[0].equals(username) && contents[1].equals(password)) {\r\n                    bfr.close();\r\n                    return line;\r\n                }\r\n                line = bfr.readLine();\r\n            }\r\n            bfr.close();\r\n        } catch (IOException e) {\r\n            throw new UserNamePasswordIncorrectException();\r\n        }\r\n        throw new UserNamePasswordIncorrectException();\r\n    }\r\n\r\n    // Assuming no name duplicate\r\n    // Gets the Customer class from name\r\n    public static User getUser(String info) {\r\n        String[] contents = info.split(\",\");\r\n        ArrayList<Product> products = new ArrayList<>();\r\n        String user = \"Customer\";\r\n\r\n        String fileName = contents[2] + \"'s File.txt\";\r\n        try {\r\n            BufferedReader bfr = new BufferedReader(new FileReader(fileName));\r\n            String line = bfr.readLine();\r\n            ArrayList<String> lines = new ArrayList<>();\r\n            while (line != null) {\r\n                lines.add(line);\r\n                line = bfr.readLine();\r\n            }\r\n\r\n            for (String productInfo : lines) {\r\n                if (!productInfo.contains(\"Name:\") && !productInfo.contains(\"User:\") && productInfo.contains(\"User: Seller\")) {\r\n                    products.add(getProduct(productInfo));\r\n                } else if (productInfo.contains(\"User: Seller\")) {\r\n                    user = \"Seller\";\r\n                }\r\n            }\r\n            bfr.close();\r\n\r\n\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n\r\n        ShoppingCart shoppingCart = new ShoppingCart(products);\r\n\r\n        if (user.equals(\"Customer\")) {\r\n            return new Customer(contents[2], contents[0], contents[1], shoppingCart.getCartItems());\r\n        } else {\r\n            return new Seller(contents[2], contents[0], contents[1]);\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    public static Product getProduct(String line) {\r\n        String[] contents = line.split(\",\");\r\n        return new Product(contents[0], contents[1], contents[2],\r\n                Integer.parseInt(contents[3]), Double.parseDouble(contents[4]));\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MarketPlace.java b/MarketPlace.java
--- a/MarketPlace.java	(revision db32e42eca2d02ac2d4a24f8145c7ad6523e1840)
+++ b/MarketPlace.java	(date 1668234350257)
@@ -74,7 +74,7 @@
                     case (3) -> SellerOptions.viewSales();//TODO
                     case (4) -> Dashboard.viewSeller(); //TODO
                     case (5) -> Dashboard.csvFile(); //TODO
-                    case (6) -> SellerOptions.viewCustomerShoppingCarts(); //TODO
+                    case (6) -> SellerOptions.viewCustomerShoppingCarts();
                     case (7) -> running = false;
                     default -> System.out.println("Please enter a valid input!");
 
Index: SellerOptions.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.*;\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\npublic class SellerOptions {\r\n    // Seller Option 2\r\n    public static void editProducts(Scanner scanner) throws IOException {\r\n        int option;\r\n        while (true) {\r\n            try {\r\n                System.out.print(\"\"\"\r\n                        Which Option of these would you like to choose?\r\n                        1. Create a new product\r\n                        2. Edit a product\r\n                        3. Delete a product\r\n                        \"\"\");\r\n                option = Integer.parseInt(scanner.nextLine());\r\n                if (option == 1 || option == 2 || option == 3) {\r\n                    break;\r\n                }\r\n                System.out.println(\"Enter a valid input!\");\r\n\r\n            } catch (NumberFormatException e) {\r\n                System.out.println(\"Enter a valid input\");\r\n            }\r\n        }\r\n        System.out.println(\"Which store would you like to make the changes?\");\r\n        String storeName = scanner.nextLine();\r\n        File markets = new File(\"Markets.txt\");\r\n        BufferedReader bfr = new BufferedReader(new FileReader(markets));\r\n        String line;\r\n        boolean bol = false;\r\n        File f = null;\r\n        while ((line = bfr.readLine()) != null) {\r\n            if (storeName.equals(line)) {\r\n                f = new File(storeName + \" Market.txt\");\r\n                bol = true;\r\n            }\r\n        }\r\n        bfr.close();\r\n        String printer = \"\";\r\n        if (bol) {\r\n            switch (option) {\r\n                case (1) -> {\r\n                    System.out.println(\"What is the Product's new name?\");\r\n                    String name = scanner.nextLine();\r\n                    System.out.println(\"What is the Product's new description?\");\r\n                    String desc = scanner.nextLine();\r\n                    System.out.println(\"What is the Product's new quantity?\");\r\n                    String quantity = scanner.nextLine();\r\n                    System.out.println(\"What is the Product's new price?\");\r\n                    String price = scanner.nextLine();\r\n                    Product product = new Product(name, storeName, desc, Integer.parseInt(quantity), Double.parseDouble(price));\r\n                    FileOutputStream fos = new FileOutputStream(f, true);\r\n                    PrintWriter pw = new PrintWriter(fos);\r\n                    pw.println(\"\");\r\n                    pw.println(product.toString());\r\n                    pw.close();\r\n\r\n\r\n                }\r\n                case (2) -> {\r\n                    printer = printer + storeName + \"\\n\" + \"-------------\\n\";\r\n                    BufferedReader productReader = new BufferedReader(new FileReader(f));\r\n                    ArrayList<Product> products = new ArrayList<>();\r\n                    while ((line = productReader.readLine()) != null) { //iterates through lines of files and adds them to string\r\n                        Product product = MarketPlace.getProduct(line);\r\n                        products.add(product);\r\n                        printer = printer +\r\n                                \"Product: \" + product.getName() + \"\\n\" +\r\n                                \"Description: \" + product.getDescription() + \"\\n\" +\r\n                                \"Price: \" + product.getPrice() + \"\\n\" +\r\n                                \"Quantity \" + product.getQuantity() + \"\\n\\n\";\r\n                    }\r\n                    System.out.println(printer);\r\n                    System.out.println(\"Which of these items would you like to edit from \" + storeName);\r\n                    String item = scanner.nextLine();\r\n                    boolean edited = false;\r\n                    for (Product product : products) {\r\n                        if (item.equals(product.getName())) {\r\n                            edited = true;\r\n                            System.out.println(\"What is the Product's new name?\");\r\n                            product.setName(scanner.nextLine());\r\n                            System.out.println(\"What is the Product's new description?\");\r\n                            product.setDescription(scanner.nextLine());\r\n                            System.out.println(\"What is the Product's new quantity?\");\r\n                            product.setQuantity(Integer.parseInt(scanner.nextLine()));\r\n                            System.out.println(\"What is the Product's new price?\");\r\n                            product.setPrice(Double.parseDouble(scanner.nextLine()));\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (!edited) {\r\n                        System.out.println(\"The product was not found in the list\");\r\n                    } else {\r\n                        System.out.println(\"The product was successfully edited\");\r\n                        System.out.println(\"Updating the file...\");\r\n                        FileOutputStream fos = new FileOutputStream(f, false);\r\n                        PrintWriter pw = new PrintWriter(fos);\r\n                        for (Product product : products) {\r\n                            System.out.println(product.toString());\r\n                            pw.println(product.toString());\r\n                        }\r\n                        pw.close();\r\n                    }\r\n\r\n                }\r\n                case (3) -> {\r\n                    printer = printer + storeName + \"\\n\" + \"-------------\\n\";\r\n                    BufferedReader productReader = new BufferedReader(new FileReader(f));\r\n                    ArrayList<Product> products = new ArrayList<>();\r\n                    while ((line = productReader.readLine()) != null) { //iterates through lines of files and adds them to string\r\n                        Product product = MarketPlace.getProduct(line);\r\n                        products.add(product);\r\n                        printer = printer +\r\n                                \"Product: \" + product.getName() + \"\\n\" +\r\n                                \"Description: \" + product.getDescription() + \"\\n\" +\r\n                                \"Price: \" + product.getPrice() + \"\\n\" +\r\n                                \"Quantity \" + product.getQuantity() + \"\\n\\n\";\r\n                    }\r\n                    System.out.println(printer);\r\n                    System.out.println(\"Which of these items would you like to remove from \" + storeName);\r\n                    String item = scanner.nextLine();\r\n                    boolean removed = false;\r\n                    Product productFound = null;\r\n                    for (Product product : products) {\r\n                        if (item.equals(product.getName())) {\r\n                            removed = true;\r\n                            productFound = product;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (!removed) {\r\n                        System.out.println(\"The product was not found in the list\");\r\n                    } else {\r\n                        products.remove(productFound);\r\n                        System.out.println(\"The product was successfully removed\");\r\n                        System.out.println(\"Updating the file...\");\r\n                        FileOutputStream fos = new FileOutputStream(f, false);\r\n                        PrintWriter pw = new PrintWriter(fos);\r\n                        for (Product product : products) {\r\n                            pw.println(product.toString());\r\n                        }\r\n                        pw.close();\r\n\r\n                    }\r\n\r\n                }\r\n                default -> System.out.println(\"Why is this project so long????????\");\r\n            }\r\n        } else {\r\n            System.out.println(\"Store not found. Try again.\");\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // Seller Option 3\r\n    public static void viewSales() {\r\n        //TODO Sellers can view a list of their sales by store, including customer information and revenues from the sale.\r\n    }\r\n\r\n\r\n    public static void viewCustomerShoppingCarts() {\r\n        //TODO Sellers can view the number of products currently in customer shopping carts, along with the store and details associated with the products.\r\n    }\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SellerOptions.java b/SellerOptions.java
--- a/SellerOptions.java	(revision db32e42eca2d02ac2d4a24f8145c7ad6523e1840)
+++ b/SellerOptions.java	(date 1668233909371)
@@ -161,8 +161,39 @@
     }
 
 
+    // Seller Option 6
     public static void viewCustomerShoppingCarts() {
-        //TODO Sellers can view the number of products currently in customer shopping carts, along with the store and details associated with the products.
+        try {
+            BufferedReader br = new BufferedReader(new FileReader("Customers.txt"));
+            String line = br.readLine();
+            ArrayList<String> list = new ArrayList<>();
+            while (line != null) {
+                list.add(line);
+                line = br.readLine();
+            }
+            for (String user : list) {
+                System.out.println("");
+                System.out.printf(user + "'s Shopping Cart\n------------------------\n");
+                File f = new File(user + "'s File.txt");
+                br = new BufferedReader(new FileReader(f));
+                line = br.readLine();
+                while (line != null) {
+                    if (!line.contains("Name: ") && !line.contains("User: ")) {
+                        Product product = MarketPlace.getProduct(line);
+                        System.out.printf("Product: %s, Store: %s, Description: %s, " +
+                                        "Price: %.2f, Quantity: %d\n", product.getName(), product.getStore(),
+                                product.getDescription(), product.getPrice(), product.getQuantity());
+                    }
+                    line = br.readLine();
+
+                }
+
+            }
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        System.out.print("\n\n");
+
     }
 }
 
